CREATE DATABASE MARCENARIA;

USE MARCENARIA;

-- CONSTRUÇÃO TABELAS

CREATE TABLE PESSOA(
CPF VARCHAR(14),
RG VARCHAR(12) UNIQUE,
NOME VARCHAR(30) NOT NULL,
CONSTRAINT PESSOA_PK PRIMARY KEY (CPF)
);

DESC PESSOA;

CREATE TABLE CLIENTE(
CPF_CLIENTE VARCHAR(14),
EMAIL VARCHAR(40),
CEP CHAR(9),
NRO_LOGRADOURO INT,
CONSTRAINT CLIENTE_PK PRIMARY KEY (CPF_CLIENTE),
CONSTRAINT CLIENTE_PESSOA_FK FOREIGN KEY (CPF_CLIENTE) REFERENCES PESSOA (CPF),
CONSTRAINT CLIENTE_NRO_LOGRAD_CK CHECK (NRO_LOGRADOURO > 0)
);

DESC CLIENTE;

CREATE TABLE FUNCIONARIO(
CPF_FUNCIONARIO VARCHAR(14),
SALARIO DECIMAL(8, 2) NOT NULL,
EXPERIENCIA_PROF VARCHAR(255) DEFAULT 'Não consta',
CONSTRAINT CPF_FUNCIONARIO PRIMARY KEY (CPF_FUNCIONARIO),
CONSTRAINT FUNCIONARIO_PESSOA_FK FOREIGN KEY (CPF_FUNCIONARIO) REFERENCES PESSOA (CPF),
CONSTRAINT FUNCIONARIO_SAL_CK CHECK (SALARIO > 0)
);

DESC FUNCIONARIO;

CREATE TABLE VENDA(
NOTA_FISCAL VARCHAR(20),
VALOR_TOTAL DECIMAL(8,2),
QTDE_ITENS INT NOT NULL,
CPF_CLI VARCHAR(14) NOT NULL,
DATA_RECEBIMENTO DATE,
CPF_FUNC VARCHAR(14) NOT NULL,
DATA_REGISTRO DATE NOT NULL,
CONSTRAINT VENDA_PK PRIMARY KEY (NOTA_FISCAL),
CONSTRAINT VENDA_CLIENTE_FK FOREIGN KEY (CPF_CLI) REFERENCES CLIENTE (CPF_CLIENTE),
CONSTRAINT VENDA_FUNC_FK FOREIGN KEY (CPF_FUNC) REFERENCES FUNCIONARIO (CPF_FUNCIONARIO),
CONSTRAINT VENDA_QTDE_ITENS_CK CHECK (QTDE_ITENS > 0)
);

DESC VENDA;

CREATE TABLE MOVEL(
ID INT,
VALOR DECIMAL(8,2) NOT NULL,
ACABAMENTO VARCHAR(100) DEFAULT 'Sem detalhes',
COMPRIMENTO DECIMAL(4,2),
LARGURA DECIMAL(4,2),
ALTURA DECIMAL(4,2),
NOTA_FISCAL_VENDA VARCHAR(20),
CONSTRAINT MOVEL_PK PRIMARY KEY (ID),
CONSTRAINT MOVEL_VENDA_FK FOREIGN KEY (NOTA_FISCAL_VENDA) REFERENCES VENDA (NOTA_FISCAL),
CONSTRAINT MOVEL_VALOR_CK CHECK (VALOR > 0)
);

DESC MOVEL;

CREATE TABLE MATERIAL(
ID VARCHAR(10),
NOME VARCHAR(30) NOT NULL,
CONSTRAINT MATERIAL_PK PRIMARY KEY (ID)
);

DESC MATERIAL;

CREATE TABLE MADEIRA(
ID_MAT VARCHAR(10) NOT NULL,
TIPO VARCHAR(20),
POSSUI_VERNIZ VARCHAR(3),
CONSTRAINT MADEIRA_PK PRIMARY KEY (ID_MAT),
CONSTRAINT MADEIRA_MATERIAL_FK FOREIGN KEY (ID_MAT) REFERENCES MATERIAL (ID),
CONSTRAINT MADEIRA_VERNIZ_CK CHECK (POSSUI_VERNIZ IN ('S', 'N', 'SIM', 'NAO'))
);

DESC MADEIRA;

CREATE TABLE PLASTICO(
ID_MAT VARCHAR(10) NOT NULL,
MALEABILIDADE VARCHAR(10),
CONSTRAINT PLASTICO_PK PRIMARY KEY (ID_MAT),
CONSTRAINT PLASTICO_MATERIAL_FK FOREIGN KEY (ID_MAT) REFERENCES MATERIAL (ID)
);

DESC PLASTICO;

CREATE TABLE METAL (
ID_MAT VARCHAR(10) NOT NULL,
TRATAMENTO VARCHAR(30),
CONSTRAINT METAL_PK PRIMARY KEY (ID_MAT),
CONSTRAINT METAL_MATERIAL_FK FOREIGN KEY (ID_MAT) REFERENCES MATERIAL (ID)
);

DESC METAL;

CREATE TABLE BORRACHA(
ID_MAT VARCHAR(10) NOT NULL,
ORIGEM VARCHAR(20) NOT NULL,
CONSTRAINT BORRACHA_PK PRIMARY KEY (ID_MAT),
CONSTRAINT BORRACHA_MATERIAL_FK FOREIGN KEY (ID_MAT) REFERENCES MATERIAL (ID)
);

DESC BORRACHA;

CREATE TABLE DEPENDENTE(
CPF_FUNC VARCHAR(14),
RG VARCHAR(12) UNIQUE NOT NULL,
NOME VARCHAR(30) NOT NULL,
DATA_NASC DATE NOT NULL,
PARENTESCO VARCHAR(10),
CONSTRAINT DEPENDENTE_PK PRIMARY KEY (CPF_FUNC, RG),
CONSTRAINT DEPENDENTE_FUNC_FK FOREIGN KEY (CPF_FUNC) REFERENCES FUNCIONARIO (CPF_FUNCIONARIO)

);

DESC DEPENDENTE;

CREATE TABLE TEL_PESSOA(
CPF_PESSOA VARCHAR(14),
TELEFONE VARCHAR(11) NOT NULL,
CONSTRAINT TEL_PESSOA_PK PRIMARY KEY (CPF_PESSOA, TELEFONE),
CONSTRAINT TEL_PESSOA_PESSOA_FK FOREIGN KEY (CPF_PESSOA) REFERENCES PESSOA (CPF)
);

DESC TEL_PESSOA;

CREATE TABLE FUNC_FAB_MOVEL(
CPF_FUNC VARCHAR(14) NOT NULL,
ID_MOVEL INT NOT NULL,
DATA_FAB DATE ,
CONSTRAINT FUNC_FAB_MOVEL_PK PRIMARY KEY (CPF_FUNC, ID_MOVEL),
CONSTRAINT FUNC_FAB_MOVEL_FUNC_FK FOREIGN KEY (CPF_FUNC) REFERENCES FUNCIONARIO (CPF_FUNCIONARIO),
CONSTRAINT FUNC_FAB_MOVEL_MOVEL_FK FOREIGN KEY (ID_MOVEL) REFERENCES MOVEL (ID)
);

DESC FUNC_FAB_MOVEL;

CREATE TABLE MOVEL_FEITO_MATE(
ID_MOVEL INT NOT NULL,
ID_MAT VARCHAR(10) NOT NULL,
CONSTRAINT MOVEL_FEITO_MATE_PF PRIMARY KEY (ID_MOVEL, ID_MAT),
CONSTRAINT MOVEL_FEITO_MATE_MOVEL_FK FOREIGN KEY (ID_MOVEL) REFERENCES MOVEL (ID),
CONSTRAINT MOVEL_FEITO_MATE_MAT_FK FOREIGN KEY (ID_MAT) REFERENCES MATERIAL (ID)
);

DESC MOVEL_FEITO_MATE;


-- INSERÇÃO DE DADOS NAS TABELAS

INSERT INTO PESSOA (CPF, RG, NOME) VALUES ('111.111.111-11', '22.222.222-1', 'Augusto');
INSERT INTO PESSOA (CPF, RG, NOME) VALUES ('112.112.112-12', '23.223.223-2', 'Bruno');
INSERT INTO PESSOA (CPF, RG, NOME) VALUES ('113.113.113-13', '24.224.224-3', 'Alice');
INSERT INTO PESSOA (CPF, RG, NOME) VALUES ('114.114.114-14', '25.225.225-4', 'Viviane');
INSERT INTO PESSOA (CPF, RG, NOME) VALUES ('115.115.115-15', '26.226.226-5', 'Alberto');
INSERT INTO PESSOA (CPF, RG, NOME) VALUES ('611.611.611-61', '72.722.722-6', 'Maicon');
INSERT INTO PESSOA (CPF, RG, NOME) VALUES ('515.515.515-65', '92.922.792-6', 'Caroline');
INSERT INTO PESSOA (CPF, RG, NOME) VALUES ('101.601.601-01', '70.720.702-7', 'Leonardo');
INSERT INTO PESSOA (CPF, RG, NOME) VALUES ('681.811.618-61', '82.782.728-8', 'Pamela');
INSERT INTO PESSOA (CPF, RG, NOME) VALUES ('217.672.771-10', '72.822.782-6', 'Julio');
INSERT INTO PESSOA (CPF, RG, NOME) VALUES ('888.811.688-68', '27.772.727-1', 'Jeferson');
INSERT INTO PESSOA (CPF, RG, NOME) VALUES ('211.672.771-10', '55.333.552-5', 'Tamires');
INSERT INTO PESSOA (CPF, RG, NOME) VALUES ('444.672.441-10', '55.444.552-5', 'Anastacia');
INSERT INTO PESSOA (CPF, RG, NOME) VALUES ('261.662.776-60', '55.555.552-5', 'Suelen');
INSERT INTO PESSOA (CPF, RG, NOME) VALUES ('211.972.791-90', '55.888.552-5', 'Marcos');
INSERT INTO PESSOA (CPF, RG, NOME) VALUES ('555.972.791-90', '95.848.542-5', 'Michael');
INSERT INTO PESSOA (CPF, RG, NOME) VALUES ('666.972.791-90', '75.878.552-4', 'Rafael');
INSERT INTO PESSOA (CPF, RG, NOME) VALUES ('700.972.791-90', '25.388.552-5', 'Carlos');
INSERT INTO PESSOA (CPF, RG, NOME) VALUES ('808.972.791-90', '45.887.552-7', 'Vinicius');
INSERT INTO PESSOA (CPF, RG, NOME) VALUES ('990.972.791-90', '15.111.552-1', 'Barte');


INSERT INTO CLIENTE (CPF_CLIENTE, EMAIL, CEP, NRO_LOGRADOURO) VALUES ('111.111.111-11', 'aug@gmai.com', '11277-102', 10);
INSERT INTO CLIENTE (CPF_CLIENTE, EMAIL, CEP, NRO_LOGRADOURO) VALUES ('112.112.112-12', 'bru@gmai.com', '15577-103', 20);
INSERT INTO CLIENTE (CPF_CLIENTE, EMAIL, CEP, NRO_LOGRADOURO) VALUES ('113.113.113-13', 'alic@gmai.com', '21277-105', 30);
INSERT INTO CLIENTE (CPF_CLIENTE, EMAIL, CEP, NRO_LOGRADOURO) VALUES ('114.114.114-14', 'vivi@gmai.com', '19277-900', 40);
INSERT INTO CLIENTE (CPF_CLIENTE, EMAIL, CEP, NRO_LOGRADOURO) VALUES ('115.115.115-15', 'alb@gmai.com', '61277-109', 50);
INSERT INTO CLIENTE (CPF_CLIENTE, EMAIL, CEP, NRO_LOGRADOURO) VALUES ('611.611.611-61', 'maic@gmai.com', '80277-550', 60);
INSERT INTO CLIENTE (CPF_CLIENTE, EMAIL, CEP, NRO_LOGRADOURO) VALUES ('515.515.515-65', 'carol@gmai.com', '19277-100', 70);
INSERT INTO CLIENTE (CPF_CLIENTE, EMAIL, CEP, NRO_LOGRADOURO) VALUES ('101.601.601-01', 'leo@gmai.com', '71277-190', 80);
INSERT INTO CLIENTE (CPF_CLIENTE, EMAIL, CEP, NRO_LOGRADOURO) VALUES ('681.811.618-61', 'pam@gmai.com', '25277-150', 90);
INSERT INTO CLIENTE (CPF_CLIENTE, EMAIL, CEP, NRO_LOGRADOURO) VALUES ('217.672.771-10', 'jul@gmai.com', '42277-100', 100);
INSERT INTO CLIENTE (CPF_CLIENTE, EMAIL, CEP, NRO_LOGRADOURO) VALUES ('888.811.688-68', 'jef@gmai.com', '55277-150', 110);
INSERT INTO CLIENTE (CPF_CLIENTE, EMAIL, CEP, NRO_LOGRADOURO) VALUES ('211.672.771-10', 'tami@gmai.com', '42277-100', 120); --
INSERT INTO CLIENTE (CPF_CLIENTE, EMAIL, CEP, NRO_LOGRADOURO) VALUES ('444.672.441-10', 'anast@gmai.com', '13077-100', 130);
INSERT INTO CLIENTE (CPF_CLIENTE, EMAIL, CEP, NRO_LOGRADOURO) VALUES ('261.662.776-60', 'sue@gmai.com', '14577-105', 140);
INSERT INTO CLIENTE (CPF_CLIENTE, EMAIL, CEP, NRO_LOGRADOURO) VALUES ('211.972.791-90', 'marc@gmai.com', '55577-150', 150);
INSERT INTO CLIENTE (CPF_CLIENTE, EMAIL, CEP, NRO_LOGRADOURO) VALUES ('555.972.791-90', 'mic@gmai.com', '46676-600', 160);
INSERT INTO CLIENTE (CPF_CLIENTE, EMAIL, CEP, NRO_LOGRADOURO) VALUES ('666.972.791-90', 'raf@gmai.com', '72277-170', 170);
INSERT INTO CLIENTE (CPF_CLIENTE, EMAIL, CEP, NRO_LOGRADOURO) VALUES ('700.972.791-90', 'car@gmai.com', '42277-100', 180);


INSERT INTO FUNCIONARIO (CPF_FUNCIONARIO, SALARIO) VALUES ('111.111.111-11', 100.50);
INSERT INTO FUNCIONARIO (CPF_FUNCIONARIO, SALARIO) VALUES ('112.112.112-12', 1000);
INSERT INTO FUNCIONARIO (CPF_FUNCIONARIO, SALARIO) VALUES ('113.113.113-13', 2000);
INSERT INTO FUNCIONARIO (CPF_FUNCIONARIO, SALARIO) VALUES ('114.114.114-14', 3000);
INSERT INTO FUNCIONARIO (CPF_FUNCIONARIO, SALARIO) VALUES ('115.115.115-15', 4000);
INSERT INTO FUNCIONARIO (CPF_FUNCIONARIO, SALARIO) VALUES ('611.611.611-61', 5000.80);
INSERT INTO FUNCIONARIO (CPF_FUNCIONARIO, SALARIO) VALUES ('515.515.515-65', 6000);
INSERT INTO FUNCIONARIO (CPF_FUNCIONARIO, SALARIO) VALUES ('101.601.601-01', 7000.70);
INSERT INTO FUNCIONARIO (CPF_FUNCIONARIO, SALARIO) VALUES ('990.972.791-90', 8000);
INSERT INTO FUNCIONARIO (CPF_FUNCIONARIO, SALARIO) VALUES ('808.972.791-90', 11000);

-- OBS: Das 20 pessoas, 10 são somente clientes e 2 são somente funcionários

INSERT INTO VENDA (NOTA_FISCAL, VALOR_TOTAL, QTDE_ITENS, CPF_CLI, CPF_FUNC, DATA_REGISTRO) VALUES ('1A', 500, 1, '555.972.791-90', '111.111.111-11', '2023-01-03');
INSERT INTO VENDA (NOTA_FISCAL, VALOR_TOTAL, QTDE_ITENS, CPF_CLI, CPF_FUNC, DATA_REGISTRO) VALUES ('1B', 1000, 1, '211.972.791-90', '112.112.112-12', '2020-02-10');
INSERT INTO VENDA (NOTA_FISCAL, VALOR_TOTAL, QTDE_ITENS, CPF_CLI, CPF_FUNC, DATA_REGISTRO) VALUES ('1C', 1500, 3, '261.662.776-60', '113.113.113-13', '2021-03-15');
INSERT INTO VENDA (NOTA_FISCAL, VALOR_TOTAL, QTDE_ITENS, CPF_CLI, CPF_FUNC, DATA_REGISTRO) VALUES ('1D', 2000, 5, '444.672.441-10', '114.114.114-14', '2020-04-20');
INSERT INTO VENDA (NOTA_FISCAL, VALOR_TOTAL, QTDE_ITENS, CPF_CLI, CPF_FUNC, DATA_REGISTRO) VALUES ('1E', 2500, 1, '211.672.771-10', '115.115.115-15', '2022-05-25');
INSERT INTO VENDA (NOTA_FISCAL, VALOR_TOTAL, QTDE_ITENS, CPF_CLI, CPF_FUNC, DATA_REGISTRO) VALUES ('1F', 3000.30, 2, '888.811.688-68', '111.111.111-11', '2020-06-30');
INSERT INTO VENDA (NOTA_FISCAL, VALOR_TOTAL, QTDE_ITENS, CPF_CLI, CPF_FUNC, DATA_REGISTRO) VALUES ('1G', 3500, 1, '217.672.771-10', '112.112.112-12', '2020-07-05');
INSERT INTO VENDA (NOTA_FISCAL, VALOR_TOTAL, QTDE_ITENS, CPF_CLI, CPF_FUNC, DATA_REGISTRO) VALUES ('1H', 4000, 2, '681.811.618-61', '113.113.113-13', '2019-08-08');
INSERT INTO VENDA (NOTA_FISCAL, VALOR_TOTAL, QTDE_ITENS, CPF_CLI, CPF_FUNC, DATA_REGISTRO) VALUES ('1I', 5500.55, 6, '101.601.601-01', '114.114.114-14', '2021-09-09');
INSERT INTO VENDA (NOTA_FISCAL, VALOR_TOTAL, QTDE_ITENS, CPF_CLI, CPF_FUNC, DATA_REGISTRO) VALUES ('1J', 11100.50, 8, '515.515.515-65', '115.115.115-15', '2020-11-04');


INSERT INTO MOVEL (ID, VALOR, NOTA_FISCAL_VENDA) VALUES (1, 200, '1A');
INSERT INTO MOVEL (ID, VALOR, NOTA_FISCAL_VENDA) VALUES (2, 400, '1B');
INSERT INTO MOVEL (ID, VALOR, NOTA_FISCAL_VENDA) VALUES (3, 700, '1C');
INSERT INTO MOVEL (ID, VALOR, NOTA_FISCAL_VENDA) VALUES (4, 5050.80, '1D');
INSERT INTO MOVEL (ID, VALOR, NOTA_FISCAL_VENDA) VALUES (5, 2000, '1E');
INSERT INTO MOVEL (ID, VALOR, NOTA_FISCAL_VENDA) VALUES (6, 1100.10, NULL);
INSERT INTO MOVEL (ID, VALOR, NOTA_FISCAL_VENDA) VALUES (7, 1700.70, NULL);
INSERT INTO MOVEL (ID, VALOR, NOTA_FISCAL_VENDA) VALUES (8, 7000, NULL);
INSERT INTO MOVEL (ID, VALOR, NOTA_FISCAL_VENDA) VALUES (9, 4400, NULL);
INSERT INTO MOVEL (ID, VALOR, NOTA_FISCAL_VENDA) VALUES (10, 990.50, NULL);

-- OBS: OS VALORES "NULL" NO ATRIBUTO "NOTA_FISCAL_VENDA" DA TABELA "MOVEL" SE EXPLICAM PELO FATO DE O MOVEL AINDA NÃO TER SIDO VENDIDO

INSERT INTO MATERIAL (ID, NOME) VALUES ('1MAD', 'MADEIRA');
INSERT INTO MATERIAL (ID, NOME) VALUES ('2MAD', 'MADEIRA');
INSERT INTO MATERIAL (ID, NOME) VALUES ('3MAD', 'MADEIRA');
INSERT INTO MATERIAL (ID, NOME) VALUES ('4MAD', 'MADEIRA');
INSERT INTO MATERIAL (ID, NOME) VALUES ('5MAD', 'MADEIRA');
INSERT INTO MATERIAL (ID, NOME) VALUES ('6MAD', 'MADEIRA');
INSERT INTO MATERIAL (ID, NOME) VALUES ('7MAD', 'MADEIRA');
INSERT INTO MATERIAL (ID, NOME) VALUES ('8MAD', 'MADEIRA');
INSERT INTO MATERIAL (ID, NOME) VALUES ('9MAD', 'MADEIRA');
INSERT INTO MATERIAL (ID, NOME) VALUES ('10MAD', 'MADEIRA');
INSERT INTO MATERIAL (ID, NOME) VALUES ('1MET', 'METAL');
INSERT INTO MATERIAL (ID, NOME) VALUES ('2MET', 'METAL');
INSERT INTO MATERIAL (ID, NOME) VALUES ('3MET', 'METAL');
INSERT INTO MATERIAL (ID, NOME) VALUES ('4MET', 'METAL');
INSERT INTO MATERIAL (ID, NOME) VALUES ('5MET', 'METAL');
INSERT INTO MATERIAL (ID, NOME) VALUES ('6MET', 'METAL');
INSERT INTO MATERIAL (ID, NOME) VALUES ('7MET', 'METAL');
INSERT INTO MATERIAL (ID, NOME) VALUES ('8MET', 'METAL');
INSERT INTO MATERIAL (ID, NOME) VALUES ('9MET', 'METAL');
INSERT INTO MATERIAL (ID, NOME) VALUES ('10MET', 'METAL');
INSERT INTO MATERIAL (ID, NOME) VALUES ('1BOR', 'BORRACHA');
INSERT INTO MATERIAL (ID, NOME) VALUES ('2BOR', 'BORRACHA');
INSERT INTO MATERIAL (ID, NOME) VALUES ('3BOR', 'BORRACHA');
INSERT INTO MATERIAL (ID, NOME) VALUES ('4BOR', 'BORRACHA');
INSERT INTO MATERIAL (ID, NOME) VALUES ('5BOR', 'BORRACHA');
INSERT INTO MATERIAL (ID, NOME) VALUES ('6BOR', 'BORRACHA');
INSERT INTO MATERIAL (ID, NOME) VALUES ('7BOR', 'BORRACHA');
INSERT INTO MATERIAL (ID, NOME) VALUES ('8BOR', 'BORRACHA');
INSERT INTO MATERIAL (ID, NOME) VALUES ('9BOR', 'BORRACHA');
INSERT INTO MATERIAL (ID, NOME) VALUES ('10BOR', 'BORRACHA');
INSERT INTO MATERIAL (ID, NOME) VALUES ('1PLAST', 'PLASTICO');
INSERT INTO MATERIAL (ID, NOME) VALUES ('2PLAST', 'PLASTICO');
INSERT INTO MATERIAL (ID, NOME) VALUES ('3PLAST', 'PLASTICO');
INSERT INTO MATERIAL (ID, NOME) VALUES ('4PLAST', 'PLASTICO');
INSERT INTO MATERIAL (ID, NOME) VALUES ('5PLAST', 'PLASTICO');
INSERT INTO MATERIAL (ID, NOME) VALUES ('6PLAST', 'PLASTICO');
INSERT INTO MATERIAL (ID, NOME) VALUES ('7PLAST', 'PLASTICO');
INSERT INTO MATERIAL (ID, NOME) VALUES ('8PLAST', 'PLASTICO');
INSERT INTO MATERIAL (ID, NOME) VALUES ('9PLAST', 'PLASTICO');
INSERT INTO MATERIAL (ID, NOME) VALUES ('10PLAST', 'PLASTICO');


INSERT INTO MADEIRA (ID_MAT, TIPO, POSSUI_VERNIZ) VALUES ('1MAD', 'PINUS', 'N');
INSERT INTO MADEIRA (ID_MAT, TIPO, POSSUI_VERNIZ) VALUES ('2MAD', 'PEROBA ROSA', 'S');
INSERT INTO MADEIRA (ID_MAT, TIPO, POSSUI_VERNIZ) VALUES ('3MAD', 'MOGNO', 'S');
INSERT INTO MADEIRA (ID_MAT, TIPO, POSSUI_VERNIZ) VALUES ('4MAD', 'CARVALHO', 'N');
INSERT INTO MADEIRA (ID_MAT, TIPO, POSSUI_VERNIZ) VALUES ('5MAD', 'MOGNO', 'S');
INSERT INTO MADEIRA (ID_MAT, TIPO, POSSUI_VERNIZ) VALUES ('6MAD', 'PEROBA DO CAMPO', 'S');
INSERT INTO MADEIRA (ID_MAT, TIPO, POSSUI_VERNIZ) VALUES ('7MAD', 'MOGNO', 'N');
INSERT INTO MADEIRA (ID_MAT, TIPO, POSSUI_VERNIZ) VALUES ('8MAD', 'PINUS', 'S');
INSERT INTO MADEIRA (ID_MAT, TIPO, POSSUI_VERNIZ) VALUES ('9MAD', 'CARVALHO', 'S');
INSERT INTO MADEIRA (ID_MAT, TIPO, POSSUI_VERNIZ) VALUES ('10MAD', 'PEROBA ROSA', 'N');


INSERT INTO METAL (ID_MAT, TRATAMENTO) VALUES ('1MET', 'GALVANIZAÇAO');
INSERT INTO METAL (ID_MAT, TRATAMENTO) VALUES ('2MET', 'CROMAÇÃO');
INSERT INTO METAL (ID_MAT, TRATAMENTO) VALUES ('3MET', 'CROMAÇÃO');
INSERT INTO METAL (ID_MAT, TRATAMENTO) VALUES ('4MET', 'CROMAÇÃO');
INSERT INTO METAL (ID_MAT, TRATAMENTO) VALUES ('5MET', 'GALVANIZAÇAO');
INSERT INTO METAL (ID_MAT, TRATAMENTO) VALUES ('6MET', 'GALVANIZAÇAO');
INSERT INTO METAL (ID_MAT, TRATAMENTO) VALUES ('7MET', 'CROMAÇÃO');
INSERT INTO METAL (ID_MAT, TRATAMENTO) VALUES ('8MET', 'GALVANIZAÇAO');
INSERT INTO METAL (ID_MAT, TRATAMENTO) VALUES ('9MET', 'GALVANIZAÇAO');
INSERT INTO METAL (ID_MAT, TRATAMENTO) VALUES ('10MET', 'CROMAÇÃO');


INSERT INTO PLASTICO (ID_MAT, MALEABILIDADE) VALUES ('1PLAST', 'ALTA');
INSERT INTO PLASTICO (ID_MAT, MALEABILIDADE) VALUES ('2PLAST', 'MEDIA');
INSERT INTO PLASTICO (ID_MAT, MALEABILIDADE) VALUES ('3PLAST', 'BAIXA');
INSERT INTO PLASTICO (ID_MAT, MALEABILIDADE) VALUES ('4PLAST', 'BAIXA');
INSERT INTO PLASTICO (ID_MAT, MALEABILIDADE) VALUES ('5PLAST', 'ALTA');
INSERT INTO PLASTICO (ID_MAT, MALEABILIDADE) VALUES ('6PLAST', 'MEDIA');
INSERT INTO PLASTICO (ID_MAT, MALEABILIDADE) VALUES ('7PLAST', 'MEDIA');
INSERT INTO PLASTICO (ID_MAT, MALEABILIDADE) VALUES ('8PLAST', 'ALTA');
INSERT INTO PLASTICO (ID_MAT, MALEABILIDADE) VALUES ('9PLAST', 'ALTA');
INSERT INTO PLASTICO (ID_MAT, MALEABILIDADE) VALUES ('10PLAST', 'BAIXA');


INSERT INTO BORRACHA (ID_MAT, ORIGEM) VALUES ('1BOR', 'AMAZONIA');
INSERT INTO BORRACHA (ID_MAT, ORIGEM) VALUES ('2BOR', 'PARA');
INSERT INTO BORRACHA (ID_MAT, ORIGEM) VALUES ('3BOR', 'PARA');
INSERT INTO BORRACHA (ID_MAT, ORIGEM) VALUES ('4BOR', 'AMAZONIA');
INSERT INTO BORRACHA (ID_MAT, ORIGEM) VALUES ('5BOR', 'AMAZONIA');
INSERT INTO BORRACHA (ID_MAT, ORIGEM) VALUES ('6BOR', 'TOCANTINS');
INSERT INTO BORRACHA (ID_MAT, ORIGEM) VALUES ('7BOR', 'AMAZONIA');
INSERT INTO BORRACHA (ID_MAT, ORIGEM) VALUES ('8BOR', 'ACRE');
INSERT INTO BORRACHA (ID_MAT, ORIGEM) VALUES ('9BOR', 'ACRE');
INSERT INTO BORRACHA (ID_MAT, ORIGEM) VALUES ('10BOR', 'AMAPA');


INSERT INTO DEPENDENTE (CPF_FUNC, RG, NOME, DATA_NASC) VALUES ('111.111.111-11', '44.544.044-4', 'Ricardo', '2015-10-10');
INSERT INTO DEPENDENTE (CPF_FUNC, RG, NOME, DATA_NASC) VALUES ('112.112.112-12', '77.777.077-4', 'Richard', '2016-11-05');
INSERT INTO DEPENDENTE (CPF_FUNC, RG, NOME, DATA_NASC) VALUES ('113.113.113-13', '22.533.334-3', 'Rita', '2014-12-14');
INSERT INTO DEPENDENTE (CPF_FUNC, RG, NOME, DATA_NASC) VALUES ('114.114.114-14', '51.555.046-6', 'Enzo', '2015-05-15');
INSERT INTO DEPENDENTE (CPF_FUNC, RG, NOME, DATA_NASC) VALUES ('115.115.115-15', '46.644.644-4','Antonio', '2013-05-18');
INSERT INTO DEPENDENTE (CPF_FUNC, RG, NOME, DATA_NASC) VALUES ('611.611.611-61', '84.584.848-8', 'Vitor', '2012-09-19');
INSERT INTO DEPENDENTE (CPF_FUNC, RG, NOME, DATA_NASC) VALUES ('515.515.515-65', '48.548.084-8', 'Vitoria', '2018-04-10');
INSERT INTO DEPENDENTE (CPF_FUNC, RG, NOME, DATA_NASC) VALUES ('101.601.601-01', '14.343.044-4', 'Margarida', '2016-10-07');
INSERT INTO DEPENDENTE (CPF_FUNC, RG, NOME, DATA_NASC) VALUES ('990.972.791-90', '56.545.024-9', 'Mateus', '2017-06-10');
INSERT INTO DEPENDENTE (CPF_FUNC, RG, NOME, DATA_NASC) VALUES ('808.972.791-90', '64.888.844-7', 'Alexandre', '2015-01-10');


INSERT INTO TEL_PESSOA (CPF_PESSOA, TELEFONE) VALUES ('515.515.515-65', '16999999999');
INSERT INTO TEL_PESSOA (CPF_PESSOA, TELEFONE) VALUES ('101.601.601-01', '11888888888');
INSERT INTO TEL_PESSOA (CPF_PESSOA, TELEFONE) VALUES ('681.811.618-61', '11777777777');
INSERT INTO TEL_PESSOA (CPF_PESSOA, TELEFONE) VALUES ('217.672.771-10', '15666666666');
INSERT INTO TEL_PESSOA (CPF_PESSOA, TELEFONE) VALUES ('888.811.688-68', '14555555555');
INSERT INTO TEL_PESSOA (CPF_PESSOA, TELEFONE) VALUES ('211.672.771-10', '16444444444');
INSERT INTO TEL_PESSOA (CPF_PESSOA, TELEFONE) VALUES ('444.672.441-10', '16333333333');
INSERT INTO TEL_PESSOA (CPF_PESSOA, TELEFONE) VALUES ('261.662.776-60', '11222222222');
INSERT INTO TEL_PESSOA (CPF_PESSOA, TELEFONE) VALUES ('211.972.791-90', '11345678903');
INSERT INTO TEL_PESSOA (CPF_PESSOA, TELEFONE) VALUES ('555.972.791-90', '16954327556');


INSERT INTO FUNC_FAB_MOVEL(CPF_FUNC, ID_MOVEL, DATA_FAB) VALUES('111.111.111-11', 1, '2010-05-05');
INSERT INTO FUNC_FAB_MOVEL(CPF_FUNC, ID_MOVEL, DATA_FAB) VALUES('112.112.112-12', 2, '2011-06-05');
INSERT INTO FUNC_FAB_MOVEL(CPF_FUNC, ID_MOVEL, DATA_FAB) VALUES('113.113.113-13', 3, '2012-07-07');
INSERT INTO FUNC_FAB_MOVEL(CPF_FUNC, ID_MOVEL, DATA_FAB) VALUES('114.114.114-14', 4, '2015-09-30');
INSERT INTO FUNC_FAB_MOVEL(CPF_FUNC, ID_MOVEL, DATA_FAB) VALUES('115.115.115-15', 5, '2014-04-10');
INSERT INTO FUNC_FAB_MOVEL(CPF_FUNC, ID_MOVEL, DATA_FAB) VALUES('114.114.114-14', 6, '2017-03-05');
INSERT INTO FUNC_FAB_MOVEL(CPF_FUNC, ID_MOVEL, DATA_FAB) VALUES('113.113.113-13', 7, '2019-09-09');
INSERT INTO FUNC_FAB_MOVEL(CPF_FUNC, ID_MOVEL, DATA_FAB) VALUES('115.115.115-15', 8, '2020-10-20');
INSERT INTO FUNC_FAB_MOVEL(CPF_FUNC, ID_MOVEL, DATA_FAB) VALUES('112.112.112-12', 9, '2018-08-18');
INSERT INTO FUNC_FAB_MOVEL(CPF_FUNC, ID_MOVEL, DATA_FAB) VALUES('111.111.111-11', 10, '2021-01-21');


INSERT INTO MOVEL_FEITO_MATE (ID_MOVEL, ID_MAT) VALUES (1, '1MAD');
INSERT INTO MOVEL_FEITO_MATE (ID_MOVEL, ID_MAT) VALUES (1, '1MET');
INSERT INTO MOVEL_FEITO_MATE (ID_MOVEL, ID_MAT) VALUES (3, '2MAD');
INSERT INTO MOVEL_FEITO_MATE (ID_MOVEL, ID_MAT) VALUES (3, '3PLAST');
INSERT INTO MOVEL_FEITO_MATE (ID_MOVEL, ID_MAT) VALUES (5, '5MAD');
INSERT INTO MOVEL_FEITO_MATE (ID_MOVEL, ID_MAT) VALUES (6, '10MAD');
INSERT INTO MOVEL_FEITO_MATE (ID_MOVEL, ID_MAT) VALUES (6, '1BOR');
INSERT INTO MOVEL_FEITO_MATE (ID_MOVEL, ID_MAT) VALUES (6, '2PLAST');
INSERT INTO MOVEL_FEITO_MATE (ID_MOVEL, ID_MAT) VALUES (3, '1MAD');
INSERT INTO MOVEL_FEITO_MATE (ID_MOVEL, ID_MAT) VALUES (10, '1MAD');

SET SQL_SAFE_UPDATES = 0;

UPDATE CLIENTE SET CEP = '21447-019' WHERE NRO_LOGRADOURO = 50;

UPDATE CLIENTE SET CEP = '41208-110' WHERE CPF_CLIENTE = '700.972.791-90';

UPDATE MOVEL SET VALOR = 7500 WHERE ID = 8;

UPDATE MOVEL SET VALOR = VALOR * 1.2 WHERE ID = 9;

UPDATE MOVEL SET VALOR = VALOR * 0.8 WHERE ID = 6;

UPDATE DEPENDENTE SET NOME = 'Enzo Martins' WHERE CPF_FUNC = '114.114.114-14';

UPDATE DEPENDENTE SET NOME = 'Victor' WHERE CPF_FUNC = '611.611.611-61';

UPDATE TEL_PESSOA SET TELEFONE = '14551234555' WHERE CPF_PESSOA = '888.811.688-68';

UPDATE TEL_PESSOA SET TELEFONE = '11712747737' WHERE CPF_PESSOA = '681.811.618-61';

 UPDATE PLASTICO SET MALEABILIDADE = 'ALTA' WHERE ID_MAT = '4PLAST';
 
 SELECT * FROM PESSOA;
 
 SELECT * FROM CLIENTE;
 
 SELECT * FROM FUNCIONARIO ORDER BY SALARIO;
 
 SELECT * FROM VENDA ORDER BY VALOR_TOTAL DESC;
 
 SELECT * FROM MOVEL ORDER BY VALOR;
 
 SELECT * FROM MATERIAL ORDER BY NOME;
 
 SELECT * FROM MADEIRA ORDER BY ID_MAT;
 
 SELECT * FROM PLASTICO ORDER BY MALEABILIDADE, ID_MAT;
 
 SELECT * FROM METAL ORDER BY ID_MAT DESC, TRATAMENTO;
 
 SELECT * FROM BORRACHA ORDER BY ORIGEM;
 
 SELECT * FROM DEPENDENTE ORDER BY NOME DESC;
 
 SELECT * FROM TEL_PESSOA ORDER BY TELEFONE;
 
 SELECT * FROM FUNC_FAB_MOVEL ORDER BY DATA_FAB;
 
 SELECT * FROM MOVEL_FEITO_MATE ORDER BY ID_MOVEL;
 
 
 
 -- EAD 4/Etapa 3 do trabalho - criação de consultas utilizando o comando SELECT
 
 -- - 3 consultas simples (em uma única tabela) e que façam filtros utilizando AND e OR. No mínimo uma delas deve usar a cláusula ORDER BY.
 
 -- Liste o CPF e o CEP dos clientes cujo número do logradouro seja menor do que 30 ou maior do que 130
 SELECT CPF_CLIENTE, CEP AS 'CEP_CLIENTE' FROM CLIENTE WHERE NRO_LOGRADOURO < 30 OR NRO_LOGRADOURO > 130;
  
  -- Liste o CPF e o Salário dos funcionários que ganham entre 4000 e 5000 (incluindo 4000 e 5000). Ordene por salário decrescentemente.
 SELECT CPF_FUNCIONARIO, SALARIO FROM FUNCIONARIO WHERE SALARIO >= 4000 AND SALARIO <= 8000 ORDER BY SALARIO DESC;
 SELECT CPF_FUNCIONARIO, SALARIO FROM FUNCIONARIO WHERE SALARIO BETWEEN 4000 AND 8000 ORDER BY SALARIO DESC;
 
 -- Liste o CPF e o Telefone das pessoas cujo segundo caractere do número do telefone seja "1" ou o último caractere seja "4". Ordene pelo número do telefone.
 SELECT CPF_PESSOA, TELEFONE FROM TEL_PESSOA WHERE TELEFONE LIKE '_1%' OR TELEFONE LIKE '%4' ORDER BY TELEFONE;
 
 
 -- - 2 consultas que utilizem funções de manipulação de caracteres (LIKE, SUBSTR, LENGTH, UPPER, etc)
 
 -- Liste o nome das pessoas cadastradas em letra maiúscula e a quantidade de letras do nome de cada uma, respectivamente.
 SELECT UPPER(NOME) AS 'NOME_MAISCULO', LENGTH(NOME) AS 'NRO_LETRAS_NOME'FROM PESSOA;
 
 -- Liste o nome e a data de nascimento dos dependentes cujo nome termine com a letra "a" ou cujas duas primeiras letras do nome sejam "Ma"
 SELECT NOME AS 'NOME_DEPENDENTE', DATA_NASC FROM DEPENDENTE WHERE NOME LIKE '%a' OR SUBSTR(NOME, 1, 2) = 'Ma';
 
 
 -- - 2 consultas que utilizem inner join de duas tabelas
 
 -- Liste o CPF e o salário de cada funcionário, bem como o nome e o RG de cada respectivo dependente de funcionário.
 SELECT F.CPF_FUNCIONARIO, F.SALARIO AS 'SAL_FUNC', D.NOME AS 'NOME_DEPENDENTE', D.RG AS 'RG_DEPENDENTE'
 FROM FUNCIONARIO F INNER JOIN DEPENDENTE D ON F.CPF_FUNCIONARIO = D.CPF_FUNC;
 
 -- Selecione o ID e o valor de cada móvel vendido, bem como a nota fiscal e o CPF do cliente que comprou cada um, respectivamente.
SELECT M.ID AS 'ID_MOVEL', M.VALOR AS 'VALOR_MOVEL', V.NOTA_FISCAL AS 'NOTA_FISCA_VENDA', V.CPF_CLI AS 'CPF_CLIENTE'
FROM MOVEL M INNER JOIN VENDA V ON M.NOTA_FISCAL_VENDA = V.NOTA_FISCAL;


-- - 2 consultas que utilizem inner join de três ou mais tabelas

-- Liste o nome, CPF, telefone e email de todos os clientes que não são funcionários (obs: nem toda pessoa cadastrada é necessariamente um cliente. Uma pessoa pode ser apenas funcionário)
SELECT P.NOME AS 'NOME_CLIENTE', C.CPF_CLIENTE, T.TELEFONE AS 'TEL_CLIENTE', C.EMAIL AS 'EMAIL_CLIENTE'
FROM PESSOA P INNER JOIN CLIENTE C ON P.CPF = C.CPF_CLIENTE INNER JOIN TEL_PESSOA T ON P.CPF = T.CPF_PESSOA;

/*Liste o CPF e o salário de todas as pessoas que são funcionários da marcenaria que têm dependentes
(funcionários-clientes com dependentes e também os somente funcionários com dependentes), além do nome de seus respectivos dependentes*/
SELECT F.CPF_FUNCIONARIO, F.SALARIO AS 'SALARIO_FUNCIONARIO', D.NOME AS 'NOME_DEPENDENTE'
FROM PESSOA P INNER JOIN FUNCIONARIO F ON P.CPF = F.CPF_FUNCIONARIO INNER JOIN DEPENDENTE D ON F.CPF_FUNCIONARIO = D.CPF_FUNC;


-- - 2 consultas que utilizem outer join (left ou right) de tabelas

/* Liste o nome, salário (caso seja funcionário/se houver), e o número do logradouro (caso seja cliente/se houver)
 das pessoas cadastradas. Todas as pessoas devem aparecer na listagem, independentemente do fato de serem ou não funcionários/clientes/funcionários-clientes */
SELECT P.NOME AS 'NOME PESSOA', F.SALARIO AS 'SALARIO_FUNCIONARIO', C.NRO_LOGRADOURO AS 'NRO_LOGRADOURO_CLIENTE'
 FROM PESSOA P LEFT OUTER JOIN FUNCIONARIO F ON P.CPF = F.CPF_FUNCIONARIO LEFT OUTER JOIN CLIENTE C ON P.CPF = C.CPF_CLIENTE;
 
/* Liste o ID e o valor de cada móvel, além do CPF do cliente que o comprou (caso já tenha sido vendido).
A listagem deve incluir os móveis que também não foram vendidos para nenhum cliente. */
SELECT M.ID AS 'ID_MOVEL', M.VALOR AS 'VALOR_MOVEL', V.CPF_CLI AS 'CPF_CLIENTE_QUE_O_ADQUIRIU' 
FROM MOVEL M LEFT OUTER JOIN VENDA V ON M.NOTA_FISCAL_VENDA = V.NOTA_FISCAL;


-- - 2 consultas que utilizem GROUP BY e funções agregadas (SUM, COUNT, MAX, MIN, AVG)

-- Liste o CPF de cada funcionário e a quantidade de vendas que cada um realizou. Listar também o cpf dos funcionários que não realizaram nenhuma venda
SELECT F.CPF_FUNCIONARIO, COUNT(V.CPF_FUNC) AS 'QTDE_VENDAS_REALIZADAS' 
FROM FUNCIONARIO F LEFT OUTER JOIN VENDA V ON F.CPF_FUNCIONARIO = V.CPF_FUNC GROUP BY F.CPF_FUNCIONARIO;

-- Liste o CPF de cada cliente e a soma de quanto cada um gastou em compras na marcenaria. Listar somente os clientes cadastrados que já realizaram alguma compra
SELECT C.CPF_CLIENTE, SUM(V.VALOR_TOTAL) AS 'VALOR_TOTAL_GASTO_NA_MARCENARIA' 
FROM CLIENTE C INNER JOIN VENDA V ON C.CPF_CLIENTE = V.CPF_CLI GROUP BY CPF_CLIENTE ORDER BY SUM(V.VALOR_TOTAL) DESC;


-- - 2 consultas que utilizem a cláusula HAVING juntamente com GROUP BY

/*Liste o CPF de cada funcionário que possui dependentes e a quantidade de depentes de cada um, respectivamente.
Considere na listagem apenas funcionários com CPF cujo último caractere seja "1" */
SELECT F.CPF_FUNCIONARIO, COUNT(D.NOME) AS 'QTDE_DEPENDENTES' FROM FUNCIONARIO F INNER JOIN DEPENDENTE D ON F.CPF_FUNCIONARIO = D.CPF_FUNC GROUP BY F.CPF_FUNCIONARIO HAVING F.CPF_FUNCIONARIO LIKE '%1';

/* Liste o CPF, o email e a quantidade de telefones que cada cliente possui.
Considere apenas os clientes cujo e-mail comece com as letras "a" ou "c"*/
SELECT C.CPF_CLIENTE, C.EMAIL AS 'EMAIL_CLIENTE', COUNT(T.TELEFONE) AS 'QTDE_TELEFONES' 
FROM CLIENTE C INNER JOIN TEL_PESSOA T ON C.CPF_CLIENTE = T.CPF_PESSOA GROUP BY C.CPF_CLIENTE, C.EMAIL 
HAVING C.EMAIL LIKE 'A%' OR C.EMAIL LIKE 'C%';


--  4 consultas que utilizem subconsultas, sendo que ao menos duas delas utilizem os operadores IN, ANY, ALL para tartar subconsultas que retornam mais de 1 registro

-- Liste o CPF e o salário dos funcionários que têm salário maior do que a média salarial de todos os funcionários da marcenaria.
SELECT CPF_FUNCIONARIO, SALARIO FROM FUNCIONARIO 
WHERE SALARIO > (SELECT AVG(SALARIO) FROM FUNCIONARIO);

-- Liste o nome e a data de nascimento dos dependentes cujos respectivos responsáveis (funcionários) ganhem mais do que 4000 reais
SELECT NOME AS 'NOME DEPENDENTE', DATA_NASC FROM DEPENDENTE 
WHERE CPF_FUNC IN (SELECT CPF_FUNCIONARIO FROM FUNCIONARIO WHERE SALARIO > 4000);

-- Liste as notas fiscais das vendas registradas a partir de 2020 e que foram registradas por funcionários que têm salário superior a 2000 reais
SELECT NOTA_FISCAL FROM VENDA 
WHERE DATA_REGISTRO >= '2020-01-01' AND CPF_FUNC IN (SELECT CPF_FUNCIONARIO FROM FUNCIONARIO WHERE SALARIO > 2000);

-- Liste as notas fiscais das vendas cujo valor total seja superior ao de qualquer venda realizada em 2021
SELECT NOTA_FISCAL FROM VENDA 
WHERE VALOR_TOTAL > ANY (SELECT VALOR_TOTAL FROM VENDA WHERE DATA_REGISTRO BETWEEN '2021-01-01' AND '2021-12-31');


-- - 1 consulta que utilize o operador UNION

/* Liste o id do materiais metal e borracha numa mesma coluna,
 e também seus respectivos tratamento (no caso dos metais) ou origem (no caso das borrachas) numa segunda coluna */
SELECT ID_MAT AS 'ID_MATERIAL', TRATAMENTO AS 'TRATAMENTO OU ORIGEM' FROM METAL UNION SELECT ID_MAT, ORIGEM FROM BORRACHA;


-- - 1 consulta que utilize o operador EXISTS ou NOT EXISTS

-- Liste o CPF e o salário dos funcionários que não possuem dependentes
SELECT F.CPF_FUNCIONARIO, F.SALARIO AS 'SALARIO_FUNCIONARIO' FROM FUNCIONARIO F WHERE NOT EXISTS (SELECT 0 FROM DEPENDENTE D WHERE F.CPF_FUNCIONARIO = D.CPF_FUNC) ORDER BY SALARIO DESC;

-- Liste o CPF e o salário dos funcionários que realizaram ao menos uma venda
SELECT F.CPF_FUNCIONARIO, F.SALARIO AS 'SALARIO_FUNCIONARIO' FROM FUNCIONARIO F WHERE EXISTS (SELECT 1 FROM VENDA V WHERE F.CPF_FUNCIONARIO = V.CPF_FUNC) ORDER BY SALARIO ASC;
